/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.nio.file.Path;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.Converter;
import model.Converter;
import model.Data;
import model.Data;
import model.FileManager;
import model.FileManager;

/**
 *
 * @author rayn0
 */
public class main extends javax.swing.JFrame {

    private FileNameExtensionFilter filter = new FileNameExtensionFilter("Asm files", "asm");//define el formato de archivo que se permite cargar en el file chooser
    private Path path;
    private Data memData;//incializador del objeto encargado de manipular los datos;
    private ArrayList<String> list; 
    private int init = 0;//variable que conoce el valor de la instruccion inicial
    private int finalInst = 0;//variable que conoce el valor de la ultima instruccion
    private int counter;//contador de instrucciones
    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        memoryTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        cpuTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        opTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        registerTable = new javax.swing.JTable();
        memorylbl = new javax.swing.JLabel();
        cpulbl = new javax.swing.JLabel();
        loadlbl = new javax.swing.JLabel();
        txtArchivo = new javax.swing.JTextField();
        btnload = new javax.swing.JButton();
        btnnext = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        memregisterTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JC-Pc");
        setResizable(false);

        memoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Instruction", "Operation", "Binary Code", "Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(memoryTable);

        cpuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "PC", "AC", "IR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(cpuTable);

        opTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Values", "0001", "0010", "0011", "0100"}
            },
            new String [] {
                "Register", "AX", "BX", "CX", "DX"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(opTable);

        registerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Values", "001", "010", "011", "100", "101"}
            },
            new String [] {
                "Operation", "Load", "Store", "Mov", "Sub", "Add"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(registerTable);

        memorylbl.setText("Memory");

        cpulbl.setText("CPU Register");

        loadlbl.setText("Load File:");

        txtArchivo.setEditable(false);
        txtArchivo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtArchivoMouseClicked(evt);
            }
        });

        btnload.setText("Load");
        btnload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnloadActionPerformed(evt);
            }
        });

        btnnext.setText("Next Instruction");
        btnnext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnextActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        memregisterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "AX", "BX", "CX", "DX"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(memregisterTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memorylbl)
                            .addComponent(loadlbl)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnload))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(btnnext)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpulbl)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnClose)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadlbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnload))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memorylbl)
                    .addComponent(cpulbl))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnnext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClose)
                        .addGap(35, 35, 35))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtArchivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtArchivoMouseClicked
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
        file.setFileFilter(filter);
        int option = file.showOpenDialog(this);
        
        if (option == JFileChooser.APPROVE_OPTION){
            String fileName = file.getSelectedFile().getPath();
            
            String filepath = file.getSelectedFile().toString();
            
            path = file.getSelectedFile().toPath();
            
            txtArchivo.setText(fileName);
        }
    }//GEN-LAST:event_txtArchivoMouseClicked

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnloadActionPerformed
        // TODO add your handling code here:
        try{
        memData = new Data(0,0);
        FileManager file = new FileManager();
        
        list = file.read(path);//lectura del archivo cargado
        Converter data = new Converter();
        init = memData.generateInstruction();
        ArrayList<ArrayList<String>> dataConverted = data.convert(list,init);
        counter = 0;
        finalInst = init + dataConverted.size();
        /*
        Carga de la tabla de la memoria
        */
        String [][] none={};
        String titles[] = {"Instruction","Operation","Binary Code","Number"};
        DefaultTableModel model = new DefaultTableModel(none,titles);
        /*Carga de datos en la tabla de memoria*/
        for(int i=0;i<dataConverted.size();i++){
            ArrayList<String> array = dataConverted.get(i);
            model.addRow(array.toArray());
        }
        memoryTable.setModel(model);
        txtArchivo.setText("");
        
        /*
        Carga de la tabla de los registros del CPU
        */
        String titlesCpu[] = {"PC","AC","IR"};
        DefaultTableModel modelCpu = new DefaultTableModel(none,titlesCpu);
        ArrayList<String> arrayCpu = new ArrayList<String>();
        arrayCpu.add("0");
        arrayCpu.add("0");
        arrayCpu.add("0");
        modelCpu.addRow(arrayCpu.toArray());
        
        cpuTable.setModel(modelCpu);
        
        /*
        Carga de los registros establecidos para manejar
        */
        String titlesReg[] = {"AX","BX","CX","DX"};
        DefaultTableModel modelReg = new DefaultTableModel(none,titlesReg);
        ArrayList<String> arrayReg = new ArrayList<String>();
        arrayReg.add("0");
        arrayReg.add("0");
        arrayReg.add("0");
        arrayReg.add("0");
        modelReg.addRow(arrayReg.toArray());
        
        memregisterTable.setModel(modelReg);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane,"No file loaded");
        
        }
        
        
        
    }//GEN-LAST:event_btnloadActionPerformed

    private void btnnextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnextActionPerformed
        // TODO add your handling code here:
        if(memData.getPc() < finalInst ){
            
            
            String [][] none={};
            
            Converter dataC = new Converter();
            dataC.intepreter(list.get(counter),memData);
            
            
            /*
            Carga de los registros establecidos para manejar
            */
            String titlesReg[] = {"AX","BX","CX","DX"};
            DefaultTableModel modelReg = new DefaultTableModel(none,titlesReg);
            ArrayList<String> arrayReg = new ArrayList<String>();
            arrayReg.add(Integer.toString(memData.getAx()));
            arrayReg.add(Integer.toString(memData.getBx()));
            arrayReg.add(Integer.toString(memData.getCx()));
            arrayReg.add(Integer.toString(memData.getDx()));
            modelReg.addRow(arrayReg.toArray());
        
            memregisterTable.setModel(modelReg);
            
            /*
            Carga de la tabla de los registros del CPU
            */
            String titlesCpu[] = {"PC","AC","IR"};
            DefaultTableModel modelCpu = new DefaultTableModel(none,titlesCpu);
            ArrayList<String> arrayCpu = new ArrayList<>();
            arrayCpu.add(Integer.toString(memData.getPc()));
            arrayCpu.add(Integer.toString(memData.getAc()));
            if (memData.getIr() < finalInst){
                arrayCpu.add(Integer.toString(memData.getIr()));
                modelCpu.addRow(arrayCpu.toArray());
            }
            else{
                arrayCpu.add("NULL");
                modelCpu.addRow(arrayCpu.toArray());
            }
            
            cpuTable.setModel(modelCpu);
            memoryTable.setRowSelectionInterval(counter, counter);//marcar fila de instruccion que se ejecuta
            
            counter++;
            memData.setPc(memData.getIr());
            memData.setIr(memData.getIr()+1);
        }
        else{JOptionPane.showMessageDialog(this,"There's no more instructions to execute.");}
        
        
    }//GEN-LAST:event_btnnextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnload;
    private javax.swing.JButton btnnext;
    private javax.swing.JTable cpuTable;
    private javax.swing.JLabel cpulbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel loadlbl;
    private javax.swing.JTable memoryTable;
    private javax.swing.JLabel memorylbl;
    private javax.swing.JTable memregisterTable;
    private javax.swing.JTable opTable;
    private javax.swing.JTable registerTable;
    private javax.swing.JTextField txtArchivo;
    // End of variables declaration//GEN-END:variables
}
